rename(pred = taxon)
env.factor.sampled <- data.frame(variable = data.base.ice[,select.env.fact])
pred.ice.mean <- pred.ice.streamb %>%
group_by_at(select.env.fact[1]) %>%
summarize(avg = median(na.omit(pred)))
# pred.ice.mean.bounds  <- pred.ice.mean %>%
#   # group_by(model) %>%
#   summarize(x.mean=max(select.env.fact),
#             y.mean.min=min(avg),
#             y.mean.max=max(avg))
plot.data <- pred.ice.streamb
# plot.data$model <- factor(plot.data$model, levels=c("GLM", "GAM", "RF"))
p <- ggplot(data=plot.data)
p <- p + geom_line(aes(x=.data[[select.env.fact]],
y=pred,
group=observation_number,
color=as.character(observation_number)))#,
# show.legend = FALSE)
# p <- p + geom_line(data=pred.ice.mean,
#             aes(x=.data[[select.env.fact]], y=avg),
#             size=1.5)
p <- p + geom_rug(data = env.factor.sampled,
aes(x=variable),
color="grey20",
alpha=0.7,
inherit.aes=F)
# p <- p + geom_segment(data=pred.ice.mean.bounds,
#                inherit.aes = FALSE,
#                lineend="round",
#                linejoin="round",
#                aes(x=x.mean,
#                    y=y.mean.min,
#                    xend=x.mean,
#                    yend=y.mean.max),
#                arrow=arrow(length = unit(0.3, "cm"),
#                            ends = "both"))
p <- p + facet_wrap(~Watershed)
p <- p + ylim(0,1)
p <- p + theme_bw()
# p <- p + theme(strip.background = element_rect(fill = "white"),
#               legend.title = element_text(size=24),
#               legend.text = element_text(size=20))
p <- p + labs(title = taxon,
x = "Temperature",
y = "Predicted probability of occurrence",
color = "Index site")
# p
list.plots[[taxon]] <- p
}
file.name <- paste0("ice_", ifelse(no.sites.ice == 1, select.sites, no.sites.ice), "_Sites_", no.steps.ice, "Steps_", select.env.fact)
file.name <- paste0(file.name, "_perCatch")
print.pdf.plots(list.plots = list.plots, width = 10, height = 10,
dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
# # analysis baetis rhodani
# m.rhodani <- mass.all.inv[4]
# vect.ss.rhodani <- list.wide.df.all.res$SteadyState$Occurrence.Baetisrhodani
# plot(data.ICE$tempmaxC, vect.ss.rhodani)
# vect.abund.rhodani <- vect.ss.rhodani / m.rhodani
# plot(data.ICE$tempmaxC, vect.abund.rhodani)
# vect.prob.rhodani <- sapply(vect.ss.rhodani, FUN = get.prob.obs, m.rhodani)
# plot(data.ICE$tempmaxC, vect.prob.rhodani)
### hist pres/abs all taxa ####
# take back prevalence information from data
temp.df.prev <- data.prevalence[which(data.prevalence$Taxon %in% vect.inv), c("Taxon", "Prevalence")]
temp.df.prev$Taxon <- paste(sub("Occurrence.","", temp.df.prev$Taxon))
temp.df.prev <- arrange(temp.df.prev, desc(Prevalence))
temp.df.prev$TaxonPrev <- paste(temp.df.prev$Taxon, temp.df.prev$Prevalence, sep = "_")
temp.df.prev$ScaledPrevalence <- n.sites * temp.df.prev$Prevalence
plot.data <- long.df.res.taxa.outputs
plot.data <- filter(plot.data, grepl("PresAbs", plot.data$Output))
plot.data$Result <- ifelse(plot.data$Result == 1, "Present", ifelse(plot.data$Result == 0, "Absent", NA))
plot.data$Result <- factor(plot.data$Result, levels=c("Present", NA, "Absent"))
p <- ggplot(plot.data, aes(x = Taxon, fill = Result))
p <- p + geom_bar(stat="count", position='stack')
p <- p + facet_wrap(~ Output, ncol = 1)
p <- p + scale_fill_manual(values=vect.col.pres.abs)
p <- p + theme_bw()
p <- p + scale_x_discrete(limits = temp.df.prev$Taxon)
p <- p + theme(axis.text.x = element_text(angle=90))
# p
file.name <- "GeomBar_PresAbs_allTaxa"
print.pdf.plots(list.plots = list(p), width = 22, height = 12, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
### response to env fact ####
# # merge two different runs to compare them
# temp.long.df <- long.df.all
# temp.long.df$Run <- "50years"
# temp.long.df2 <- long.df.all.other
# temp.long.df2$Run <- "100years"
# temp.plot.data <- bind_rows(temp.long.df, temp.long.df2)
list.plots <- list()
for(taxon in vect.inv){
# taxon <- vect.inv[1]
print(taxon)
plot.data <- long.df.all %>% # to comment if comparing different runs
# plot.data <- temp.plot.data %>% # to compare different runs
filter(Taxon %in% taxon) %>%
filter(Factor %in% vect.dir.env.fact) %>%
filter(Output %in% vect.names.output[c(2,4,5)])
plot.data$Result <- as.numeric(plot.data$Result)
plot.data$Dispersal <- ifelse(is.na(plot.data$Result), "Yes", "No")
plot.data$Result[is.na(plot.data$Result)] <- 0
plot.data$Factor <- factor(plot.data$Factor, levels=vect.dir.env.fact)
# summary(plot.data$Result)
plot.data.trait <- filter(long.df.trait, Taxon %in% taxon)
plot.data.trait$Factor <- factor(plot.data.trait$Factor, levels=vect.dir.env.fact)
plot.data.trait$Output <- "ProbObs"
p <- ggplot(plot.data, aes(x = Value, y = Result, color = Dispersal))
# p <- ggplot(plot.data, aes(x = Value, y = Result, color = Run)) # to compare different runs
p <- p + geom_point(alpha = 0.5)
p <- p + geom_point(data = plot.data.trait, aes(x = Value, y = Pref), shape = 4, color = "#7CAE00", size = 3)
p <- p + facet_grid(Output ~ Factor, scales = "free")
# p <- p + scale_y_continuous(limits = c(0,1))
p <- p + labs(title = taxon)
p <- p + theme_bw()
p <- p + theme(strip.background = element_rect(fill = "white"))
p <- p + scale_color_manual(values=c("Yes" = "grey60", "No" = "orange")) # to comment if comparing different runs
# p
list.plots[[taxon]] <- p
}
# list.plots$Ceratopogonidae
# file.name <- paste0("ResponseDirEnvFact_allTaxa_Compar50_100years") # to compare different runs
file.name <- paste0("ResponseDirEnvFact_allTaxa") # to compare different runs
print.pdf.plots(list.plots = list.plots, width = 8, height = 6, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
# extract selected taxa for analysis and plot only these ones
names.selected.taxa <- names(selected.taxa.analysis)
list.plots.selected.taxa <- Filter(Negate(is.null), list.plots[names.selected.taxa])
file.name <- paste0("ResponseDirEnvFact_SelectedTaxa")
print.pdf.plots(list.plots = list.plots.selected.taxa, width = 8, height = 6, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
# OTHER PLOTS ####
## histograms ###
# ## hist biomass per taxon ####
# print(vect.names.output)
# for (output in vect.names.output[1:2]) {
#     file.name <- paste0(dir.outputs, name.run, output, "_Hist", ".pdf")
#     pdf(file.name,width=8.25,height=11.75)
#     par(mfrow=c(5,4))
#     for (taxon in vect.inv) {
#         # taxon <- Invertebrates[1]
#         taxon.ss <- list.wide.df.all.res[[output]][,taxon]
#         hist(taxon.ss, main = taxon,
#              xlab = output)
#     }
#     dev.off()
# }
# ### hist pres/abs per taxon ####
# list.plots <- list()
#
# for (taxon in vect.inv) {
#     taxon <- vect.inv[1]
#     print(taxon)
#     plot.data <- long.df.res.taxa[,c(vect.analysis, "Taxon", "ThreshPresAbs", "Observation")]
#     plot.data$ThreshPresAbs <- ifelse(plot.data$ThreshPresAbs == 1, "Present", ifelse(plot.data$ThreshPresAbs == 0, "Absent", NA))
#     plot.data <- filter(plot.data, Taxon %in% taxon)
#     plot.data <- gather(plot.data, key = Output, value = Value, -all_of(c(vect.analysis, "Taxon")))
#     plot.data$Value <- factor(plot.data$Value, levels=c("Present", NA, "Absent"))
#     prev.taxon <- data.prevalence[which(data.prevalence$Taxon == taxon), "Prevalence"]
#
#     p <- ggplot(plot.data, aes(x = Output, fill = Value))
#     p <- p + geom_bar(stat="count", position='stack')
#     p <- p + theme_bw()
#     p <- p + scale_fill_manual(values=c(vect.col.pres.abs, "NA" = "grey"))
#     p <- p + labs(title = taxon,
#                   subtitle = paste("Prevalence:", prev.taxon))
#     list.plots[[taxon]] <- p
# }
# list.plots$Baetisrhodani
#
# file.name <- paste0("GeomBar_ThreshPresAbsvsObs_perTaxon")
# print.pdf.plots(list.plots = list.plots, width = 6, height = 5, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
#                 png = F)
# plot.data <- long.df.res.taxa[,c(vect.analysis, "Taxon", "ThreshPresAbs", "Observation")]
# plot.data$ThreshPresAbs <- ifelse(plot.data$ThreshPresAbs == 1, "Present", ifelse(plot.data$ThreshPresAbs == 0, "Absent", NA))
# # plot.data <- filter(plot.data, Taxon %in% taxon)
# plot.data <- gather(plot.data, key = Output, value = Value, -all_of(c(vect.analysis, "Taxon")))
# p <- ggplot(plot.data, aes(x = Taxon, fill = Value))
# p <- p + geom_bar(stat="count",position='dodge')
# p <- p + theme(axis.text.x = element_text(angle=90))
# p
# # [1] 50
#
# oo <- options(nwarnings=10000)  ## set, store old options
#
# options()$nwarnings  ## check
# # [1] 10000
#
# options(oo)  ## restore old options
#
# extract results
n <- 1
catch <- names(list.results)[1]
catch
temp.res <- as.matrix(list.results[[n]][["res"]])
temp.parfix <- list.results[[n]][["par.fixc"]]
temp.y.names <- list.results[[n]][["y.names"]]
temp.inv <- list.results[[n]][["Invertebrates"]]
temp.sites <- temp.y.names$reaches
summary(mass.all.inv)
# analysis steady state and warnings
res.ss <- calc.res.steadystate.update(res=temp.res, times=tout, par=temp.parfix, y.names=temp.y.names,
ratio.tail = ratio.tail, threshold = threshold.select, warn.pom = F)
D.mean.mod <- res.ss$D.mean.mod
print(res.ss$Warnings)
# plot time series of abundance for different analysis
time.tail <- c(ceiling(length(tout)*(1-ratio.tail)):length(tout))
time.select <- time.tail # tout[c(1:100)]
colfunc <- colorRampPalette(c("darkturquoise","gold1", "red1"))
col.lines <- c(colfunc(no.steps.ice))
scales::show_col(col.lines)
taxon <- vect.inv[4]
vect.inv
unlist(sapply(list.results, "[[", "Invertebrates"))
sapply(list.results, "[[", "Invertebrates")
vect.inv <- as.vector(unique(unlist(sapply(list.results, "[[", "Invertebrates"), use.names = FALSE)))
vect.inv
unlist(sapply(list.results, "[[", "Invertebrates"), use.names = FALSE)
test <- sapply(list.results, "[[", "Invertebrates")
str(test)
test <- unlist(sapply(list.results, "[[", "Invertebrates"), use.names = FALSE)
str(test)
test <- paste(sapply(list.results, "[[", "Invertebrates"))
str(test)
vect.inv <- as.vector(unique(paste(sapply(list.results, "[[", "Invertebrates"))))
vect.inv
# extract vectors of all sites and taxa modeled
vect.sites <- unique(unlist(sapply(list.results, "[[", 1)["reaches",]))
vect.taxa <- unique(unlist(sapply(list.results, "[[", 1)["taxa",]))
vect.inv <- as.vector(unique(paste(sapply(list.results, "[[", "Invertebrates"))))
vect.occ.inv <- paste("Occurrence.", vect.inv, sep = "")
names(vect.inv) <- vect.occ.inv
temp.vect.taxa <- names(selected.taxa.analysis)[names(selected.taxa.analysis) %in% vect.taxa]
taxon <- vect.inv[4]
vect.inv
# taxon <- vect.inv[4]
# mass.taxon <- mass.all.inv[which(grepl(taxon, names(mass.all.inv)))]
temperature.range <- round(data.env.res$tempmaxC, digits = 2)
# plot.data <- as.data.frame(temp.res[time.tail, which(grepl(taxon, colnames(temp.res)))])
plot.data <- as.data.frame(temp.res[which(temp.res[,"time"] %in% time.select), which(grepl(taxon, colnames(temp.res)))])
View(plot.data)
time.select
taxon <- temp.inv[1]
# plot.data <- as.data.frame(temp.res[time.tail, which(grepl(taxon, colnames(temp.res)))])
plot.data <- as.data.frame(temp.res[which(temp.res[,"time"] %in% time.select), which(grepl(taxon, colnames(temp.res)))])
View(plot.data)
View(temp.res)
ratio.tail
time.tail
plot.data <- as.data.frame(temp.res[time.tail, which(grepl(taxon, colnames(temp.res)))])
View(plot.data)
View(plot.data)
temp.sites
site <- temp.sites[1]
temp.plot.data <- as.data.frame(temp.res[time.tail, which(grepl(taxon, colnames(temp.res)) & grepl(site, colnames(temp.res)))])
View(temp.plot.data)
# site <- temp.sites[1]
c.ind <- which(grepl(taxon, colnames(temp.res)) && grepl(site, colnames(temp.res)))
# site <- temp.sites[1]
c.ind <- which(grepl(taxon, colnames(temp.res)) & grepl(site, colnames(temp.res)))
View(temp.res)
temp.plot.data <- as.data.frame(temp.res[time.tail, c("time", c.ind)])
temp.plot.data <- as.data.frame(temp.res[time.tail, c(which(colnames(temp.res) == "time"), c.ind)])
View(temp.plot.data)
time.tail
?filter
time.select
?rename
temp.plot.data <- as.data.frame(temp.res) %>%
slice(rind.time.select) %>%
select(time, which(grepl(taxon, colnames(temp.res)) & grepl(site, colnames(temp.res)))) %>%
rename(biomass = 2) %>%
mutate(site = site)
# plot time series of abundance for different analysis
rind.time.tail <- c(ceiling(length(tout)*(1-ratio.tail)):length(tout))
rind.time.select <- rind.time.tail # tout[c(1:100)]
temp.plot.data <- as.data.frame(temp.res) %>%
slice(rind.time.select) %>%
select(time, which(grepl(taxon, colnames(temp.res)) & grepl(site, colnames(temp.res)))) %>%
rename(biomass = 2) %>%
mutate(site = site)
View(temp.plot.data)
plot.data <- data.frame()
plot.data <- data.frame()
for(site in temp.sites){
# site <- temp.sites[1]
temp.plot.data <- as.data.frame(temp.res) %>%
slice(rind.time.select) %>%
select(time, which(grepl(taxon, colnames(temp.res)) & grepl(site, colnames(temp.res)))) %>%
rename(biomass = 2) %>%
mutate(site = site)
plot.data <- bind_rows(plot.data, temp.plot.data)
}
View(plot.data)
# plot.data <- gather(plot.data, key = Site, value = Biomass, -Time)
plot.data$abundance <- plot.data$biomass/mass.all.inv[taxon]
p <- ggplot(plot.data, aes(x = time, y = abundance, color = site), size = 3)
p <- p + geom_line()
# p <- p + scale_color_manual(values = col.lines)
p <- p + labs(title = taxon) #,
p
# colfunc <- colorRampPalette(c("darkturquoise","gold1", "red1"))
# col.lines <- c(colfunc(no.steps.ice))
# scales::show_col(col.lines)
list.plots <- list()
# colfunc <- colorRampPalette(c("darkturquoise","gold1", "red1"))
# col.lines <- c(colfunc(no.steps.ice))
# scales::show_col(col.lines)
list.plots <- list()
for (taxon in temp.inv) {
plot.data <- data.frame()
for(site in temp.sites){
# site <- temp.sites[1]
temp.plot.data <- as.data.frame(temp.res) %>%
slice(rind.time.select) %>%
select(time, which(grepl(taxon, colnames(temp.res)) & grepl(site, colnames(temp.res)))) %>%
rename(biomass = 2) %>%
mutate(site = site)
plot.data <- bind_rows(plot.data, temp.plot.data)
}
# taxon <- temp.inv[1]
# mass.taxon <- mass.all.inv[which(grepl(taxon, names(mass.all.inv)))]
# temperature.range <- round(data.env.res$tempmaxC, digits = 2)
# plot.data <- as.data.frame(temp.res[rind.time.tail, which(grepl(taxon, colnames(temp.res)))])
# plot.data <- as.data.frame(temp.res[which(temp.res[,"time"] %in% rind.time.select), which(grepl(taxon, colnames(temp.res)))])
# colnames(plot.data) <- temperature.range # 1:20 # paste0(select.sites, "_", 1:20)
# plot.data$Time <- rind.time.tail
# plot.data$Time <- rind.time.select
# plot.data <- gather(plot.data, key = Site, value = Biomass, -Time)
plot.data$abundance <- plot.data$biomass/mass.all.inv[taxon]
# plot.data$Site <- as.factor(plot.data$Site)
# plot.data$Site <- factor(plot.data$Site, levels = temperature.range)
# plot.data$Site <- factor(plot.data$Site, levels= temp)
p <- ggplot(plot.data, aes(x = time, y = abundance, color = site), size = 3)
p <- p + geom_line()
# p <- p + scale_color_manual(values = col.lines)
p <- p + labs(title = taxon) #,
# color = "Temperature")
# p
list.plots[[taxon]] <- p
}
View(list.plots)
file.name <- paste0("TimeSeriesAbundance_", ratio.tail, "TimeTail_", catch)
print.pdf.plots(list.plots = list.plots, width = 8, height = 6, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
temp.inv
# colfunc <- colorRampPalette(c("darkturquoise","gold1", "red1"))
# col.lines <- c(colfunc(no.steps.ice))
# scales::show_col(col.lines)
list.plots <- list()
for (taxon in temp.inv) {
print(taxon)
plot.data <- data.frame()
for(site in temp.sites){
# site <- temp.sites[1]
temp.plot.data <- as.data.frame(temp.res) %>%
slice(rind.time.select) %>%
select(time, which(grepl(taxon, colnames(temp.res)) & grepl(site, colnames(temp.res)))) %>%
rename(biomass = 2) %>%
mutate(site = site)
plot.data <- bind_rows(plot.data, temp.plot.data)
}
# taxon <- temp.inv[1]
# mass.taxon <- mass.all.inv[which(grepl(taxon, names(mass.all.inv)))]
# temperature.range <- round(data.env.res$tempmaxC, digits = 2)
# plot.data <- as.data.frame(temp.res[rind.time.tail, which(grepl(taxon, colnames(temp.res)))])
# plot.data <- as.data.frame(temp.res[which(temp.res[,"time"] %in% rind.time.select), which(grepl(taxon, colnames(temp.res)))])
# colnames(plot.data) <- temperature.range # 1:20 # paste0(select.sites, "_", 1:20)
# plot.data$Time <- rind.time.tail
# plot.data$Time <- rind.time.select
# plot.data <- gather(plot.data, key = Site, value = Biomass, -Time)
plot.data$abundance <- plot.data$biomass/mass.all.inv[taxon]
# plot.data$Site <- as.factor(plot.data$Site)
# plot.data$Site <- factor(plot.data$Site, levels = temperature.range)
# plot.data$Site <- factor(plot.data$Site, levels= temp)
p <- ggplot(plot.data, aes(x = time, y = abundance, color = site), size = 3)
p <- p + geom_line()
# p <- p + scale_color_manual(values = col.lines)
p <- p + labs(title = taxon) #,
# color = "Temperature")
# p
list.plots[[taxon]] <- p
}
file.name <- paste0("TimeSeriesAbundance_", ratio.tail, "TimeTail_", catch)
print.pdf.plots(list.plots = list.plots, width = 8, height = 6, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
threshold.select <- threshold.min
# analysis steady state and warnings
res.ss <- calc.res.steadystate.update(res=temp.res, times=tout, par=temp.parfix, y.names=temp.y.names,
ratio.tail = ratio.tail, threshold = threshold.select, warn.pom = F)
D.mean.mod <- res.ss$D.mean.mod
print(res.ss$Warnings)
# print warnings steady state
sink(file = paste0(dir.outputs, name.run,
"warnings_calcSS_",
ratio.tail, "tail_",
catch, "_",
threshold.select, "thresh",
".txt"))
cat("Ratio tail:", ratio.tail,
"\nThreshold selected:", threshold.select,
"\nNumber of warnings:", length(res.ss$Warnings),
"\nWarnings steady state:\n")
print(res.ss$Warnings)
sink()
threshold.select <- threshold.max
# # [1] 50
#
# oo <- options(nwarnings=10000)  ## set, store old options
#
# options()$nwarnings  ## check
# # [1] 10000
#
# options(oo)  ## restore old options
#
# extract results
n <- 1
# analysis steady state and warnings
res.ss <- calc.res.steadystate.update(res=temp.res, times=tout, par=temp.parfix, y.names=temp.y.names,
ratio.tail = ratio.tail, threshold = threshold.select, warn.pom = F)
D.mean.mod <- res.ss$D.mean.mod
print(res.ss$Warnings)
# print warnings steady state
sink(file = paste0(dir.outputs, name.run,
"warnings_calcSS_",
ratio.tail, "tail_",
catch, "_",
threshold.select, "thresh",
".txt"))
cat("Ratio tail:", ratio.tail,
"\nThreshold selected:", threshold.select,
"\nNumber of warnings:", length(res.ss$Warnings),
"\nWarnings steady state:\n")
print(res.ss$Warnings)
sink()
threshold.select <- threshold.mean
threshold.select
threshold.select <- threshold.med
# # [1] 50
#
# oo <- options(nwarnings=10000)  ## set, store old options
#
# options()$nwarnings  ## check
# # [1] 10000
#
# options(oo)  ## restore old options
#
# extract results
n <- 1
catch <- names(list.results)[1]
temp.res <- as.matrix(list.results[[n]][["res"]])
# analysis steady state and warnings
res.ss <- calc.res.steadystate.update(res=temp.res, times=tout, par=temp.parfix, y.names=temp.y.names,
ratio.tail = ratio.tail, threshold = threshold.select, warn.pom = F)
D.mean.mod <- res.ss$D.mean.mod
print(res.ss$Warnings)
# print warnings steady state
sink(file = paste0(dir.outputs, name.run,
"warnings_calcSS_",
ratio.tail, "tail_",
catch, "_",
threshold.select, "thresh",
".txt"))
cat("Ratio tail:", ratio.tail,
"\nThreshold selected:", threshold.select,
"\nNumber of warnings:", length(res.ss$Warnings),
"\nWarnings steady state:\n")
print(res.ss$Warnings)
sink()
threshold.select <- threshold.test
# analysis steady state and warnings
res.ss <- calc.res.steadystate.update(res=temp.res, times=tout, par=temp.parfix, y.names=temp.y.names,
ratio.tail = ratio.tail, threshold = threshold.select, warn.pom = F)
D.mean.mod <- res.ss$D.mean.mod
print(res.ss$Warnings)
# print warnings steady state
sink(file = paste0(dir.outputs, name.run,
"warnings_calcSS_",
ratio.tail, "tail_",
catch, "_",
threshold.select, "thresh",
".txt"))
cat("Ratio tail:", ratio.tail,
"\nThreshold selected:", threshold.select,
"\nNumber of warnings:", length(res.ss$Warnings),
"\nWarnings steady state:\n")
print(res.ss$Warnings)
sink()
# # [1] 50
#
# oo <- options(nwarnings=10000)  ## set, store old options
#
# options()$nwarnings  ## check
# # [1] 10000
#
# options(oo)  ## restore old options
#
# extract results
n <- 2
catch <- names(list.results)[1]
temp.res <- as.matrix(list.results[[n]][["res"]])
temp.parfix <- list.results[[n]][["par.fixc"]]
temp.y.names <- list.results[[n]][["y.names"]]
temp.inv <- list.results[[n]][["Invertebrates"]]
temp.sites <- temp.y.names$reaches
summary(mass.all.inv)
# analysis steady state and warnings
res.ss <- calc.res.steadystate.update(res=temp.res, times=tout, par=temp.parfix, y.names=temp.y.names,
ratio.tail = ratio.tail, threshold = threshold.select, warn.pom = F)
D.mean.mod <- res.ss$D.mean.mod
print(res.ss$Warnings)
