print(vect.analysis.env.fact)
vect.analysis <- c("ReachID", "X", "Y", "MonitoringProgram", catch.variable, vect.analysis.env.fact)
# make dataframes (wide and long) with steady state, abundance and prob of occ
# df.generic <- data.env.res[,vect.analysis]
df.generic <- data.env.inputs[,vect.analysis]
df.generic[,vect.occ.inv] <- NA
vect.names.output <- c("SteadyState", "Abundance", "ThreshPresAbs", "ProbObs", "SamplePresAbs")
list.wide.df.all.res <- list()
for (output in vect.names.output) {
list.wide.df.all.res[[output]] <- df.generic
}
for (n in 1:length(list.results)) {
# n <- 5
temp.res <- as.matrix(list.results[[n]][["res"]])
temp.parfix <- list.results[[n]][["par.fixc"]]
temp.y.names <- list.results[[n]][["y.names"]]
temp.inv <- list.results[[n]][["Invertebrates"]]
temp.sites <- temp.y.names$reaches
temp.res.ss <- calc.res.steadystate(res=temp.res, times=tout, par=temp.parfix, y.names=temp.y.names)
for (site in temp.sites) {
# site <- temp.sites[2]
for (taxon in temp.inv) {
# taxon <- temp.inv[2]
occ.taxon <- names(vect.inv)[which(vect.inv == taxon)]
ind <- which(grepl(taxon, names(temp.res.ss))
& grepl(paste0("^", site, "_"), # "^" Asserts that we are at the start because many sites could have same pattern
names(temp.res.ss)))
temp.ss <- temp.res.ss[ind]
if(any(is.na(temp.ss))){ # print warning if NA in results
cat("\nWARNING NA in results:\nTaxon:", taxon,
"\nSite:", site, "\n")
}
temp.m.taxon <- mass.all.inv[which(grepl(taxon, names(mass.all.inv)))]
temp.abund <- temp.ss/temp.m.taxon
if(par.adjust[["thresh.indiv"]][["Flag"]]){
temp.thresh.occ <- ifelse(temp.abund > par.adjust[["thresh.indiv"]][["Value"]], 1, 0) # if there is more than 1 individuals it's present, otherwise absent
} else {
temp.thresh.occ <- ifelse(temp.abund > 0.5, 1, 0) # if there is more than 0.5 individuals it's present, otherwise absent
}
temp.prob.obs <- get.prob.obs(ss = temp.ss, M.taxon = temp.m.taxon)
# print(temp.prob.obs)
# rbinom(100,1,temp.prob.obs) # test rbinom
temp.sample.occ <- rbinom(1,1,temp.prob.obs)
for (output in vect.names.output) {
# output <- vect.names.output[1]
out <- ifelse(output == "SteadyState", temp.ss,
ifelse(output == "Abundance", temp.abund,
ifelse(output == "ThreshPresAbs", temp.thresh.occ,
ifelse(output == "ProbObs", temp.prob.obs,
ifelse(output == "SamplePresAbs", temp.sample.occ,
NA)))))
list.wide.df.all.res[[output]][which(list.wide.df.all.res[[output]][,"ReachID"] == site), occ.taxon] <- out
}
}
}
}
# recover observation data for selected sites
data.obs <- df.generic
data.inv.bdm$ReachID <- gsub("_", ".", data.inv.bdm$SiteId)
for (site in data.obs$ReachID) {
# site <- df.generic$ReachID[1]
temp.monit.prog <- data.obs[which(data.obs$ReachID == site), "MonitoringProgram"]
# if(site %in% data.inv.bdm$ReachID){
for(taxon in vect.inv){
occ.taxon <- names(vect.inv)[which(vect.inv == taxon)]
if(temp.monit.prog == "BDM"){
obs <- data.inv.bdm[which(data.inv.bdm$ReachID == site), which(grepl(taxon, colnames(data.inv.bdm)))]
} else {
cind.taxon <- which(grepl(taxon, colnames(data.env.inputs)))
if(length(cind.taxon) > 0){ # if tayon exists in all monit. prog. dataset
obs <- data.env.inputs[which(data.env.inputs$ReachID == site), cind.taxon]
} else {
obs <- NA
}
}
if(length(obs) == 0){ obs <- NA}
if(!is.na(obs) & obs == 0){
data.obs[which(data.obs$ReachID == site), occ.taxon] <- "Absent"
} else if(!is.na(obs) & obs == 1){
data.obs[which(data.obs$ReachID == site), occ.taxon] <- "Present"
}
}
# }
}
# add it to list with other outputs
vect.names.output <- c(vect.names.output, "Observation")
list.wide.df.all.res[["Observation"]] <- data.obs
# make list long dataframes
list.long.df.res.taxa <- list()
for (output in vect.names.output) {
# output <- vect.names.output[1]
temp.df.output <- list.wide.df.all.res[[output]]
temp.long.df.output <- gather(temp.df.output, key = Taxon, value = Output, -all_of(vect.analysis))
colnames(temp.long.df.output)[which(colnames(temp.long.df.output) == "Output")] <- output
list.long.df.res.taxa[[output]] <- temp.long.df.output
}
# make long dataframe with all taxa (env. fact. and outputs stay wide)
long.df.res.taxa <- list.long.df.res.taxa %>% reduce(merge, by = c(vect.analysis, "Taxon"))
long.df.res.taxa$Taxon <- gsub("Occurrence.", "", long.df.res.taxa$Taxon)
# make long dataframe with all taxa and env. factors (outputs stay wide)
long.df.res.taxa.env.fact <- gather(long.df.res.taxa,
key = Factor, value = Value,
-c(which(!colnames(long.df.res.taxa) %in% vect.env.inputs)))
# make long dataframe with all taxa and outputs (env. fact. stay wide)
long.df.res.taxa.outputs <- gather(long.df.res.taxa,
key = Output, value = Result,
-c(which(!colnames(long.df.res.taxa) %in% vect.names.output)))
# make long dataframe with everything
long.df.all <- gather(long.df.res.taxa.env.fact,
key = Output, value = Result,
-c(which(!colnames(long.df.res.taxa.env.fact) %in% vect.names.output)))
# Write final datasets ####
for (output in vect.names.output) {
# output <- vect.names.output[1]
wide.df.output <- list.wide.df.all.res[[output]]
file.name <- paste0(dir.outputs, name.run, "WideData_Results", output,".csv")
write.table(wide.df.output, file = file.name, sep =";", row.names = F)
}
# make dataframe with prevalence and taxonomy of results
print(vect.names.output[c(3,5)])
# select two different of the Presence/Absence outputs (threshold or sample)
# to calculate prevalence in results
for (prev.output in vect.names.output[c(3,5)]) {
print(prev.output)
df.prev.results <- data.frame("Taxon" = vect.inv)
df.prev.results$Occurrence.taxa <- vect.occ.inv
df.prev.results$Prevalence <- NA
df.prev.results$Prevalence.NoDisp <- NA
df.prev.results$Taxonomic.level <- NA
df.prev.results$Missing.values <- 0
for (occ.taxon in df.prev.results$Occurrence.taxa) {
# occ.taxon <- df.prev.results$Occurrence.taxa[3]
rind <- which(df.prev.results$Occurrence.taxa == occ.taxon)
taxon <- df.prev.results$Taxon[rind]
nb.sites <- dim(list.wide.df.all.res[[prev.output]])[1]
vect.pres.abs.tax <- list.wide.df.all.res[[prev.output]][,occ.taxon]
nb.pres <- sum(na.omit(vect.pres.abs.tax))
nb.abs <- sum(na.omit(vect.pres.abs.tax) == 0)
nb.na <- sum(is.na(vect.pres.abs.tax))
prev <- nb.pres/nb.sites
if(nb.abs != 0){
prev.nodisp <- nb.pres/(nb.abs + nb.pres) # sum abs and pres without NA
} else { # if there are no abs
prev.nodisp <- 1
}
tax.level <- data.prevalence[which(data.prevalence$Taxon == taxon), "Taxonomic.level"]
df.prev.results[rind, "Prevalence"] <- prev
df.prev.results[rind, "Prevalence.NoDisp"] <- prev.nodisp
df.prev.results[rind, "Taxonomic.level"] <- tax.level
}
# write csv df prevalence
file.name <- paste0(dir.outputs, name.run, "PrevalenceTaxonomy_", prev.output,".csv")
write.table(df.prev.results, file = file.name, sep =";", row.names = F)
}
# ICE streambugs ####
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# data.base.ice <- read.csv(paste0(dir.outputs, "WideDataInputs_ICE_100Sites.csv"), sep = ";")
# data.results.ice <- read.csv(paste0(dir.outputs,
# "10Catch_2000Sites_ICE_Prev0.15_10Yea_3651Steps_WideData_ResultsProbObs.csv"), sep = ";")
data.results.ice <- list.wide.df.all.res$ProbObs
select.env.fact <- vect.dir.env.fact[2]
print(select.env.fact)
vect.reaches.ice <- data.base.ice$ReachID
# catch <- "Aare"
#
#
#
# data.test <- data.results.ice %>%
#   filter(Watershed == catch)
# # filter(Watershed == "Ticino")
# # filter(Watershed == "Rhone")
#
# vect.reaches.test <- data.base.ice %>%
#   filter(Watershed == catch)
# vect.reaches.test <- vect.reaches.test$ReachID
#
# list.problems.na <- list()
# list.problems.optima <- list()
# # test if some outputs are not monotously increasing/decreasing (multiple optima)
# for(reach in vect.reaches.test){
#   # reach <- vect.reaches.ice[1]
#   # reach <- "SynthPoint158Ti"
#   # print(reach)
#   # watershed <- data.base.ice[which(data.base.ice$ReachID == reach), "Watershed"]
#   # for(taxon in selected.taxa.analysis){
#     taxon <- selected.taxa.analysis[8]
#     temp.results <- data.test[which(grepl(reach, data.test$ReachID)), c("ReachID", select.env.fact, taxon)]
#     vect.res <- temp.results[,taxon]
#     ind.max <- which(ggpmisc::find_peaks(vect.res,  span = 3))
#     ind.na <- which(is.na(vect.res))
#     name.problem <- paste0(reach,"_",taxon)
#     if(length(ind.na) > 0){
#       list.problems.na[[name.problem]] <- c(problem = "NA",
#                                          indices = ind.na,
#                                          reach = reach,
#                                          catch = watershed,
#                                          taxon = taxon)
#
#     } else if(length(ind.max) > 1){
#       cat("Problem for", name.problem, "\n")
#       plot(1:length(vect.res), vect.res, main = name.problem)
#       points(ind.max, vect.res[ind.max], col = "red")
#       list.problems.optima[[name.problem]] <- c(problem = "Optima",
#                                          indices = ind.max,
#                                          reach = reach,
#                                          catch = watershed,
#                                          taxon = taxon)
#       }
#   # }
# }
#
# rind.na <- which(is.na(data.results.ice$Occurrence.Gammaridae))
# sites.na <- data.results.ice[rind.na, c("ReachID", env.factor[1:8])]
temp.vect.taxa <- names(selected.taxa.analysis)[names(selected.taxa.analysis) %in% vect.taxa]
temp.occ.taxa <- paste0("Occurrence.", temp.vect.taxa)
list.plots <- list()
for(taxon in temp.occ.taxa){
# taxon.under.obs <- names(taxa.colnames)[4]
pred.ice.streamb <- data.results.ice[,c("ReachID","Watershed", select.env.fact, taxon)] %>%
mutate(observation_number = rep(1:no.sites.ice, each = no.steps.ice),
column_label = 1,
model = "Streambugs") %>%
rename(pred = taxon)
env.factor.sampled <- data.frame(variable = data.base.ice[,select.env.fact])
pred.ice.mean <- pred.ice.streamb %>%
group_by_at(select.env.fact[1]) %>%
summarize(avg = median(na.omit(pred)))
# pred.ice.mean.bounds  <- pred.ice.mean %>%
#   # group_by(model) %>%
#   summarize(x.mean=max(select.env.fact),
#             y.mean.min=min(avg),
#             y.mean.max=max(avg))
plot.data <- pred.ice.streamb
# plot.data$model <- factor(plot.data$model, levels=c("GLM", "GAM", "RF"))
fig3 <- ggplot(data=plot.data) +
geom_line(aes(x=.data[[select.env.fact]],
y=pred,
group=observation_number,
color=as.character(observation_number)),
show.legend = FALSE) +
# geom_line(data=pred.ice.mean,
#           aes(x=.data[[select.env.fact]], y=avg),
#           size=1.5) +
geom_rug(data = env.factor.sampled,
aes(x=variable),
color="grey20",
alpha=0.7,
inherit.aes=F) +
# geom_segment(data=pred.ice.mean.bounds,
#              inherit.aes = FALSE,
#              lineend="round",
#              linejoin="round",
#              aes(x=x.mean,
#                  y=y.mean.min,
#                  xend=x.mean,
#                  yend=y.mean.max),
#              arrow=arrow(length = unit(0.3, "cm"),
#                          ends = "both")) +
# facet_wrap(~factor(model, levels = c("GLM", "GAM", "RF"))) +
# facet_wrap(~Watershed) +
ylim(0,1) +
theme_bw() +
theme(strip.background = element_rect(fill = "white"),
legend.title = element_text(size=24),
legend.text = element_text(size=20)) +
labs(title = taxon,
x = "Temperature",
y = "Predicted probability of occurrence")
# fig3
list.plots[[taxon]] <- fig3
}
file.name <- paste0("ice_", ifelse(no.sites.ice == 1, select.sites, no.sites.ice), "_Sites_", no.steps.ice, "Steps_", select.env.fact)
print.pdf.plots(list.plots = list.plots, width = 6, height = 6,
dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
# # !!!! analysis baetis rhodani ####
# m.rhodani <- mass.all.inv[4]
# vect.ss.rhodani <- list.wide.df.all.res$SteadyState$Occurrence.Baetisrhodani
# plot(data.ICE$tempmaxC, vect.ss.rhodani)
# vect.abund.rhodani <- vect.ss.rhodani / m.rhodani
# plot(data.ICE$tempmaxC, vect.abund.rhodani)
# vect.prob.rhodani <- sapply(vect.ss.rhodani, FUN = get.prob.obs, m.rhodani)
# plot(data.ICE$tempmaxC, vect.prob.rhodani)
## histograms ###
# ## hist biomass per taxon ####
# print(vect.names.output)
# for (output in vect.names.output[1:2]) {
#     file.name <- paste0(dir.outputs, name.run, output, "_Hist", ".pdf")
#     pdf(file.name,width=8.25,height=11.75)
#     par(mfrow=c(5,4))
#     for (taxon in vect.inv) {
#         # taxon <- Invertebrates[1]
#         taxon.ss <- list.wide.df.all.res[[output]][,taxon]
#         hist(taxon.ss, main = taxon,
#              xlab = output)
#     }
#     dev.off()
# }
# ### hist pres/abs per taxon ####
# list.plots <- list()
#
# for (taxon in vect.inv) {
#     taxon <- vect.inv[1]
#     print(taxon)
#     plot.data <- long.df.res.taxa[,c(vect.analysis, "Taxon", "ThreshPresAbs", "Observation")]
#     plot.data$ThreshPresAbs <- ifelse(plot.data$ThreshPresAbs == 1, "Present", ifelse(plot.data$ThreshPresAbs == 0, "Absent", NA))
#     plot.data <- filter(plot.data, Taxon %in% taxon)
#     plot.data <- gather(plot.data, key = Output, value = Value, -all_of(c(vect.analysis, "Taxon")))
#     plot.data$Value <- factor(plot.data$Value, levels=c("Present", NA, "Absent"))
#     prev.taxon <- data.prevalence[which(data.prevalence$Taxon == taxon), "Prevalence"]
#
#     p <- ggplot(plot.data, aes(x = Output, fill = Value))
#     p <- p + geom_bar(stat="count", position='stack')
#     p <- p + theme_bw()
#     p <- p + scale_fill_manual(values=c(vect.col.pres.abs, "NA" = "grey"))
#     p <- p + labs(title = taxon,
#                   subtitle = paste("Prevalence:", prev.taxon))
#     list.plots[[taxon]] <- p
# }
# list.plots$Baetisrhodani
#
# file.name <- paste0("GeomBar_ThreshPresAbsvsObs_perTaxon")
# print.pdf.plots(list.plots = list.plots, width = 6, height = 5, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
#                 png = F)
# plot.data <- long.df.res.taxa[,c(vect.analysis, "Taxon", "ThreshPresAbs", "Observation")]
# plot.data$ThreshPresAbs <- ifelse(plot.data$ThreshPresAbs == 1, "Present", ifelse(plot.data$ThreshPresAbs == 0, "Absent", NA))
# # plot.data <- filter(plot.data, Taxon %in% taxon)
# plot.data <- gather(plot.data, key = Output, value = Value, -all_of(c(vect.analysis, "Taxon")))
# p <- ggplot(plot.data, aes(x = Taxon, fill = Value))
# p <- p + geom_bar(stat="count",position='dodge')
# p <- p + theme(axis.text.x = element_text(angle=90))
# p
### hist pres/abs all taxa ####
# take back prevalence information from data
temp.df.prev <- data.prevalence[which(data.prevalence$Taxon %in% vect.inv), c("Taxon", "Prevalence")]
temp.df.prev$Taxon <- paste(sub("Occurrence.","", temp.df.prev$Taxon))
temp.df.prev <- arrange(temp.df.prev, desc(Prevalence))
temp.df.prev$TaxonPrev <- paste(temp.df.prev$Taxon, temp.df.prev$Prevalence, sep = "_")
temp.df.prev$ScaledPrevalence <- n.sites * temp.df.prev$Prevalence
plot.data <- long.df.res.taxa.outputs
plot.data <- filter(plot.data, grepl("PresAbs", plot.data$Output))
plot.data$Result <- ifelse(plot.data$Result == 1, "Present", ifelse(plot.data$Result == 0, "Absent", NA))
plot.data$Result <- factor(plot.data$Result, levels=c("Present", NA, "Absent"))
p <- ggplot(plot.data, aes(x = Taxon, fill = Result))
p <- p + geom_bar(stat="count", position='stack')
p <- p + facet_wrap(~ Output, ncol = 1)
p <- p + scale_fill_manual(values=vect.col.pres.abs)
p <- p + theme_bw()
p <- p + scale_x_discrete(limits = temp.df.prev$Taxon)
p <- p + theme(axis.text.x = element_text(angle=90))
# p
file.name <- "GeomBar_PresAbs_allTaxa"
print.pdf.plots(list.plots = list(p), width = 22, height = 12, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
# p <- ggplot(plot.data, aes(x = Taxon, y = Abundance))
# p <- p + geom_boxplot()
# p <- p + geom_point(data = temp.df.prev, aes(x = Taxon, y = ScaledPrevalence), color = "green", size = 2)
# p <- p + theme_bw()
# p <- p + scale_x_discrete(limits = temp.df.prev$Taxon)
# p <- p + theme(axis.text.x = element_text(angle=90))
# p
## abund vs env fact ####
### resp abund to one env fact ####
list.plots <- list()
for(taxon in vect.inv){
print(taxon)
plot.data <- long.df.res.taxa.env.fact %>%
filter(Taxon %in% taxon) %>%
filter(Factor %in% vect.analysis.env.fact)
p <- ggplot(plot.data, aes(x = Value, y = Abundance))
# , color = Observation))
p <- p + geom_point()
p <- p + facet_wrap(. ~ Factor, scales = "free_x")
# p <- p + scale_y_continuous(limits = c(0,1))
p <- p + labs(title = taxon)
p <- p + theme_bw()
# p <- p + scale_color_manual(values=vect.col.pres.abs)
# p
list.plots[[taxon]] <- p
}
# list.plots$Ceratopogonidae
file.name <- paste0("AbundanceVsEnvFact")
print.pdf.plots(list.plots = list.plots, width = 12, height = 8, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
### resp prob occ to direct env fact ####
list.plots <- list()
for(taxon in vect.inv){
# taxon <- vect.inv[30]
print(taxon)
plot.data <- long.df.all %>%
filter(Taxon %in% taxon) %>%
filter(Factor %in% vect.dir.env.fact) %>%
filter(Output %in% vect.names.output[3:5])
plot.data$Result <- as.numeric(plot.data$Result)
plot.data$Dispersal <- ifelse(is.na(plot.data$Result), "Yes", "No")
plot.data$Result[is.na(plot.data$Result)] <- 0
plot.data$Factor <- factor(plot.data$Factor, levels=vect.dir.env.fact)
# summary(plot.data$Result)
plot.data.trait <- filter(long.df.trait, Taxon %in% taxon)
plot.data.trait$Factor <- factor(plot.data.trait$Factor, levels=vect.dir.env.fact)
p <- ggplot(plot.data, aes(x = Value, y = Result, color = Dispersal))
p <- p + geom_point(alpha = 0.5)
p <- p + geom_point(data = plot.data.trait, aes(x = Value, y = Pref), shape = 4, color = "#7CAE00", size = 3)
p <- p + facet_grid(Output ~ Factor, scales = "free_x")
p <- p + scale_y_continuous(limits = c(0,1))
p <- p + labs(title = taxon)
p <- p + theme_bw()
p <- p + scale_color_manual(values=c("Yes" = "grey60", "No" = "orange"))
# p
list.plots[[taxon]] <- p
}
# list.plots$Ceratopogonidae
file.name <- paste0("PresAbsVsDirEnvFact")
print.pdf.plots(list.plots = list.plots, width = 8, height = 6, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
png = F)
# ### resp prob occ to indirect env fact ####
#
# list.plots <- list()
# for(taxon in vect.inv){
#     # taxon <- vect.inv[1]
#     print(taxon)
#     plot.data <- long.df.all %>%
#       filter(Taxon %in% taxon) %>%
#       filter(Factor %in% vect.indir.env.fact) %>%
#       filter(Output %in% vect.names.output[3:5])
#     plot.data$Result <- as.numeric(plot.data$Result)
#     plot.data.trait <- filter(long.df.trait, Taxon %in% taxon)
#
#     p <- ggplot(plot.data, aes(x = Value, y = Result))
#     p <- p + geom_point(alpha = 0.7, color = "gray30")
#     p <- p + facet_grid(Output ~ Factor, scales = "free_x")
#     p <- p + scale_y_continuous(limits = c(0,1))
#     p <- p + labs(title = taxon)
#     p <- p + theme_bw()
#     p <- p + scale_color_manual(values=vect.col.pres.abs)
#     # p
#     list.plots[[taxon]] <- p
# }
# list.plots$Ceratopogonidae
#
# file.name <- paste0("ThreshPresAbsVsIndirEnvFact")
# print.pdf.plots(list.plots = list.plots, width = 8, height = 6, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
#                 png = F)
# ### resp to two env fact
# print(vect.dir.env.fact)
# list.plots <- list()
# for (taxon in vect.inv) {
#     # taxon <- vect.inv[1]
#     # plot.data <- long.df.all %>%
#     #     filter(Taxon %in% taxon) %>%
#     #     filter(Factor %in% vect.dir.env.fact)
#     # plot.data$LimFact <- ifelse(plot.data$Factor %in% vect.dir.env.fact[1:2], "Growth", "Death")
#     # plot.data$Fact1 <- plot.data$Factor
#     # plot.data$Val1 <- plot.data$Value
#     # plot.data$Fact2 <- plot.data$Factor
#     # plot.data$Val2 <- plot.data$Value
#     #
#     # p <- ggplot(plot.data, aes(x = Val1, y = Val2, color = Observation))
#     # p <- p + geom_point()
#     # p <- p + facet_grid(Fact1 ~ Fact2, scales = "free")
#     # # p <- p + scale_y_continuous(limits = c(0,1))
#     # # p <- p + labs(title = taxon)
#     # p <- p + theme_bw()
#     # p <- p + scale_color_manual(values=vect.col.pres.abs)
#     # p
#
#     temp.list.plots <- list()
#     for (n in 1:nrow(df.comb.dir.env.fact)) {
#         plot.data <- long.df.res.taxa %>%
#             filter(Taxon %in% taxon)
#         # n <- 1
#         comb.env.fact <- df.comb.dir.env.fact[n,]
#         p <- ggplot(plot.data, aes_string(x = comb.env.fact[1], y = comb.env.fact[2],
#                                    size = "Abundance", color = "Observation"))
#         p <- p + geom_point()
#         p <- p + scale_color_manual(values = vect.col.pres.abs)
#         p <- p + theme_bw()
#         p <- p + theme(legend.position="none")
#
#         # p
#         temp.list.plots[[n]] <- p
#     }
#     # temp.list.plots[[2]]
#     q <- gridExtra::grid.arrange(grobs = temp.list.plots, ncol = 2, top = taxon)
#
#     list.plots[[taxon]] <- q
# }
#
# file.name <- paste0("AbundVsEnvFact_TwoFact")
# print.pdf.plots(list.plots = list.plots, width = 12, height = 8, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
#                 png = F)
# ### resp env fact multidim ####
# # taxon <- vect.inv[6]
#
# list.plots <- list()
# for(taxon in vect.inv){
#     plot.data <- filter(long.df.res.taxa, Taxon %in% taxon)
#     plot.data$saprowqclass <- as.factor(plot.data$saprowqclass)
#     colnames(plot.data)
#     p <- ggplot(plot.data, aes(x = tempmaxC, y = currentms,
#                                size = Abundance, color = orgmicropollTU, shape = saprowqclass))
#     p <- p + geom_point(alpha = 0.7)
#     p <- p + labs(title = taxon)
#     p <- p + theme_bw()
#     list.plots[[taxon]] <- p
# }
# file.name <- paste0("AbundanceVsEnvFact_MultiDimensional")
# print.pdf.plots(list.plots = list.plots, width = 10, height = 8, dir.output = dir.outputs, info.file.name = name.run, file.name = file.name,
#                 png = F)
source("C:/Users/cholleem/Documents/ArtificialData_Streambugs_SDMs/A2_scripts_streambugs/main_streambugs.r", echo=TRUE)
source("C:/Users/cholleem/Documents/ArtificialData_Streambugs_SDMs/A2_scripts_streambugs/main_streambugs.r", echo=TRUE)
source("C:/Users/cholleem/Documents/ArtificialData_Streambugs_SDMs/A2_scripts_streambugs/main_streambugs.r", echo=TRUE)
